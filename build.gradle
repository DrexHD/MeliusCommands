import org.jetbrains.changelog.Changelog

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id "me.modmuss50.mod-publish-plugin" version "0.+"
	id 'org.jetbrains.changelog' version '2.+'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

version = "${mod_version}+${minecraft_version}"
group = project.maven_group

repositories {
	maven { url 'https://maven.nucleoid.xyz' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include("eu.pb4:predicate-api:${project.predicate_api_version}")
	modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set(17)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = fetchChangelog()
	type = BETA
	displayName = "PerPlayerWanderingTraders ${version.get()}"
	modLoaders.add("fabric")
	modLoaders.add("quilt")
	modrinth {
		projectId = "lCC4AmlO"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)
	}
	curseforge {
		projectId = "903910"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)
	}
	github {
		accessToken = providers.environmentVariable("GITHUB_TOKEN")
		repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
		commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
	}
}

private String fetchChangelog() {
	def log = getChangelog.changelog.get()
	if (log.has(project.mod_version)) {
		return log.renderItem(
				log.get(project.mod_version).withHeader(false),
				Changelog.OutputType.MARKDOWN
		)
	} else {
		return ""
	}
}